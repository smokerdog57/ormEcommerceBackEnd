Operational Concept

"This application serves as a back-end eCommerce database server, utilizing key technologies such as ORM, MySQL2, Sequelize, Node.js, Express, and Insomnia. These technologies are employed to build and test the application, allowing for the use of Insomnia's CRUD commands to interact with API routes and their associated functionalities."

Database Setup and Initialization:

Create the Database: Initiate an SQL command-line session using MS Visual Studio.  Add a new bash terminal. Navigate to the project root directory and execute following commands
	mysql -u root -pw;
	source ./db/schema.sql;

Initialize Database Models: Execute the bash command: node ./seeds/index.js This command utilizes Sequelize to generate table models and establish associations based on the definitions in ./models/index.js. The file ./models/index.js imports Category.js, Product.js, ProductTag.js, and Tag.js scripts, which extend the built-in Sequelize model class and initialize model properties.

Seed populates the database with initial data for testing. 

In summary, the steps are: database is configured, database models are established, associations are defined, and initial data is inserted. The ORM E-Commerce Back End is now ready to handle API requests via Insomnia.

Server back end application Start:

Start the Server Application: Execute the following bash command to run the ./server.js script: npm start. This script establishes a connection to the 'ecommerce_db' database by calling ./config/connection.js and sets up API routes by calling ./routes/index.js. Your server application is now running and ready to serve API requests.

Testing:

After following the steps outlined above and addressing any error messages that may arise, conduct the following tests to ensure the application's integrity:

Test001: Execute the SQL command show databases to verify that ecommerce_db is displayed.
Test002: Execute the SQL command selebct * from category to verify the seeding of the Category model (table).
Test003: Execute the SQL command select * from products to verify the seeding of the Product model (table).
Test004: Execute the SQL command select * from product_tag to verify the seeding of the Product_Tag model (table).
Test005: Execute the SQL command select * from tag to verify the seeding of the Tag model (table).
Test006: Utilize Insomnia to execute API GET routes for categories and confirm that data is displayed in a properly formatted JSON format.
Test007: Utilize Insomnia to execute an API GET route for products and ensure that data is displayed in a properly formatted JSON format.
Test008: Utilize Insomnia to execute an API GET route for tags and confirm that data is displayed in a properly formatted JSON format.
Test009: Utilize Insomnia to execute API POST, PUT, and DELETE routes for categories and verify that the Insomnia preview window displays the appropriate data.


# 13 Object-Relational Mapping (ORM): E-Commerce Back End

### Link to GitHub repository:  https://github.com/smokerdog57/ormEcommerceBackEnd
### Castify link:   			https://...

## Badges
    
![github](https://img.shields.io/badge/github-Profile-lightgrey.svg) ![jses6](https://img.shields.io/badge/JavaScript--ES6-yellow.svg) ![node.js](https://img.shields.io/badge/node.js-12.0-green.svg) ![npm](https://img.shields.io/badge/npm-6.14.4-blue.svg) plus add the following badges:

	1. Express
	2. chrome castify
	3. [Sequelize](https://www.npmjs.com/package/sequelize)
	4. [MySQL2](https://www.npmjs.com/package/mysql2)	
	5. [dotenv](https://www.npmjs.com/package/dotenv)

## Table of Contents
- [Description](#description)
- [Installation](#installation)
- [Usage](#usage)
- [Requirements](#requirements)
- [Mock-up](#mock-up)
- [License](#license)
- [Contributing](#contributing)
- [Tests](#tests)
- [Questions](#questions)

## Description

Your task is to build the back end for an e-commerce site by modifying starter code. You’ll configure a working Express.js API to use Sequelize to interact with a MySQL database.

Because this application won’t be deployed, you’ll also need to provide a link to a walkthrough video that demonstrates its functionality and all of the acceptance criteria being met. You’ll need to submit a link to the video and add it to the readme of your project.

## Installation
  
1. create a new github repository named 'ormEcommerceBackEnd'
2. launch microsoft visual studio Code app
3. enter cli:  cd ~/bootcamp/homework
4. enter cli:  git clone <repository> // creates ormEcommerceBackEnd directory
5. enter cli:  cd ormEcommerceBackEnd
6. enter cli:  npm init
7. enter cli:  npm install --save mysql2
8. enter cli:  npm install inquirer@8.2.4
9. enter cli:  npm install cli-table --save
xx. enter cli: npm install dotenv
10. After running above steps create, copy and/or confirm the following directory structure and files:
	assets			// copy from challenge
	config
	   connection.js	// create new file
	db
	   schema.sql			// xxx
	models
	   Category.js			// xxx
	   index.js			// xxx	   
	   Product.js			// xxx
	   ProductTag.js		// xxx
	   Tag.js			// xxx 
	routes
	   api
		category-routes.js
		index.js
		product-routes.js
		tag-routes.js	
	   index.js
	seeds
	   category-seeds.js
	   index.js
	   product-seeds.js
	   product-tag-seeds.js
	   tag-seeds.js
	.env
	.gitignore
	node_modules
	package.json		// confirm: created by npm		
	package-lock.json	// confirm: created by npm	
	README.md		// copy from challenge

## Acceptance Criteria

```md
GIVEN a functional Express.js API
WHEN I add my database name, MySQL username, and MySQL password to an environment variable file
THEN I am able to connect to a database using Sequelize
WHEN I enter schema and seed commands
THEN a development database is created and is seeded with test data
WHEN I enter the command to invoke the application
THEN my server is started and the Sequelize models are synced to the MySQL database
WHEN I open API GET routes in Insomnia for categories, products, or tags
THEN the data for each of these routes is displayed in a formatted JSON
WHEN I test API POST, PUT, and DELETE routes in Insomnia
THEN I am able to successfully create, update, and delete data in my database
```

## Mock-Up

The following animation shows the application's GET routes to return all categories, all products, and all tags being tested in Insomnia:

![In Insomnia, the user tests “GET tags,” “GET Categories,” and “GET All Products.”.](./Assets/13-orm-homework-demo-01.gif)

The following animation shows the application's GET routes to return a single category, a single product, and a single tag being tested in Insomnia:

![In Insomnia, the user tests “GET tag by id,” “GET Category by ID,” and “GET One Product.”](./Assets/13-orm-homework-demo-02.gif)

The following animation shows the application's POST, PUT, and DELETE routes for categories being tested in Insomnia:

![In Insomnia, the user tests “DELETE Category by ID,” “CREATE Category,” and “UPDATE Category.”](./Assets/13-orm-homework-demo-03.gif)

Your walkthrough video should also show the POST, PUT, and DELETE routes for products and tags being tested in Insomnia.

## Getting Started

This Challenge will require a video submission. Refer to the [Fullstack Blog Video Submission Guide](https://coding-boot-camp.github.io/full-stack/computer-literacy/video-submission-guide) for additional guidance on creating a video.

You’ll need to use the [MySQL2](https://www.npmjs.com/package/mysql2) and [Sequelize](https://www.npmjs.com/package/sequelize) packages to connect your Express.js API to a MySQL database and the [dotenv](https://www.npmjs.com/package/dotenv) package to use environment variables to store sensitive data.

Use the `schema.sql` file in the `db` folder to create your database with MySQL shell commands. Use environment variables to store sensitive data like your MySQL username, password, and database name.

### Database Models

Your database should contain the following four models, including the requirements listed for each model:

* `Category`

  * `id`

    * Integer.
  
    * Doesn't allow null values.
  
    * Set as primary key.
  
    * Uses auto increment.

  * `category_name`
  
    * String.
  
    * Doesn't allow null values.

* `Product`

  * `id`
  
    * Integer.
  
    * Doesn't allow null values.
  
    * Set as primary key.
  
    * Uses auto increment.

  * `product_name`
  
    * String.
  
    * Doesn't allow null values.

  * `price`
  
    * Decimal.
  
    * Doesn't allow null values.
  
    * Validates that the value is a decimal.

  * `stock`
  
    * Integer.
  
    * Doesn't allow null values.
  
    * Set a default value of `10`.
  
    * Validates that the value is numeric.

  * `category_id`
  
    * Integer.
  
    * References the `Category` model's `id`.

* `Tag`

  * `id`
  
    * Integer.
  
    * Doesn't allow null values.
  
    * Set as primary key.
  
    * Uses auto increment.

  * `tag_name`
  
    * String.

* `ProductTag`

  * `id`

    * Integer.

    * Doesn't allow null values.

    * Set as primary key.

    * Uses auto increment.

  * `product_id`

    * Integer.

    * References the `Product` model's `id`.

  * `tag_id`

    * Integer.

    * References the `Tag` model's `id`.

### Associations

You'll need to execute association methods on your Sequelize models to create the following relationships between them:

* `Product` belongs to `Category`, and `Category` has many `Product` models, as a category can have multiple products but a product can only belong to one category.

* `Product` belongs to many `Tag` models, and `Tag` belongs to many `Product` models. Allow products to have multiple tags and tags to have many products by using the `ProductTag` through model.

> **Hint:** Make sure you set up foreign key relationships that match the column we created in the respective models.

### Fill Out the API Routes to Perform RESTful CRUD Operations

Fill out the unfinished routes in `product-routes.js`, `tag-routes.js`, and `category-routes.js` to perform create, read, update, and delete operations using your Sequelize models.

Note that the functionality for creating the many-to-many relationship for products has already been completed for you.

> **Hint**: Be sure to look at the mini-project code for syntax help and use your model's column definitions to figure out what `req.body` will be for POST and PUT routes!

### Seed the Database

After creating the models and routes, run `npm run seed` to seed data to your database so that you can test your routes.

### Sync Sequelize to the Database on Server Start

Create the code needed in `server.js` to sync the Sequelize models to the MySQL database on server start.

## Usage

1. open MS Visual Studio and terminal
2. enter cli:  cd homework/ormEcommerceBackEnd
2. enter cli:  mysql -u root -p <when prompted enter password>
3. enter cli:  source ./db/schema.sql    // create and use database
5. open a second MS Visual Studio terminal session
6. enter cli:  cd homework/ormEcommerceBackEnd
7. enter cli:  npm run seed
8. enter cli:  npm start

## Mock-Up

The following video shows an example of the application being used from the command line:
xxxxxx


## License

github, jses6, express.js
https://opensource.org/licenses/MIT

npm
https://opensource.org/licenses/Artistic-2.0


- - -
© 2023 edX Boot Camps LLC. Confidential and Proprietary. All Rights Reserved.

## Contributing

1. Sandy Smith (tutor):  Sandy helped me understand the acceptance criteria.

## Tests

```
Test001: execute schema.sql, then verify employees db is created and table schemas are properly created.
Test002: execute npm run seed, then verify the employees db is seeded with the starter date.
Test003: execute npm start, then via insomnia ...
```

## Questions
  
### Github username
smokerdog57

### Github url
https://github.com/smokerdog57/sqlCliEmployeeDatabase
  
### Contact me
email: smokerdog57@gmail.com
phone: 941-221-1132